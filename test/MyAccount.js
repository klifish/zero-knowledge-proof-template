const { expect } = require("chai");

describe('MyAccount Smart Contract', function () {
    const commitmentValue = 42;
    const salt = 1;
    let accounts;
    let entryPoint;
    let verifier;
    let myAccountFactory
    let myAccount
    const ethersSigner = ethers.provider.getSigner()

    before(async () => {
        const EntryPointFactoryContract = await ethers.getContractFactory("EntryPointFactory");
        entryPointFactory = await EntryPointFactoryContract.deploy();

        entryPointFactoryAddress = await entryPointFactory.getAddress();
    });

    it("Should deploy the Verifier", async () => {
        const VerifierContract = await ethers.getContractFactory("PlonkVerifier");
        verifier = await VerifierContract.deploy();

        const verifierAddress = await verifier.getAddress();

        expect(verifierAddress).to.be.a.properAddress;
    });

    it("Should deploy the EntryPoint", async () => {
        const EntryPointFactoryContract = await ethers.getContractFactory("EntryPointFactory");
        entryPointFactory = await EntryPointFactoryContract.deploy();

        await entryPointFactory.deployEntryPoint();

        const filter = entryPointFactory.filters.EntryPointDeployed();
        const events = await entryPointFactory.queryFilter(filter);

        entryPoint = events[0].args.entryPointAddress;

        expect(events.length).to.be.equal(1);
        expect(events[0].args.entryPointAddress).to.be.a.properAddress;

    });

    it("Should deploy the MyAccountFactory", async () => {
        const MyAccountFactoryContract = await ethers.getContractFactory("MyAccountFactory");
        myAccountFactory = await MyAccountFactoryContract.deploy(entryPoint, await verifier.getAddress(), 0);

        const myAccountFactoryAddress = await myAccountFactory.getAddress();

        expect(myAccountFactoryAddress).to.be.a.properAddress;

        const accountImplementationAddress = await myAccountFactory.accountImplementation();
        expect(accountImplementationAddress).to.be.a.properAddress;
    });

    it("Should create a new MyAccount", async () => {
        await myAccountFactory.createAccount(commitmentValue, salt);

        const filter = myAccountFactory.filters.AccountCreated();
        const events = await myAccountFactory.queryFilter(filter);

        // TODO: @kun Check why the account address is not the same as the one generated by the factory
        // const accountAddress = await myAccountFactory.getAddress(commitmentValue, salt);
        // console.log("MyAccount address:", accountAddress);

        const MyAccount = await ethers.getContractFactory("MyAccount");
        myAccount = await MyAccount.attach(events[0].args.accountAddress);

        const entryPointAddress = await myAccount.entryPoint();
        expect(entryPointAddress).to.be.equal(entryPoint);

    });

    it('owner should be able to call transfer', async () => {

        accounts = await ethers.getSigners();
        console.log("Accounts:", accounts.map(a => a.address));

        // const { proxy: account } = await createAccount(ethers.provider.getSigner(), accounts[0], entryPoint)
        let ONE_ETH = ethers.parseEther('1')
        await ethersSigner.sendTransaction({ from: accounts[0], to: myAccount.address, value: ONE_ETH })
        await myAccount.execute(accounts[2], ONE_ETH, '0x')
    })


});